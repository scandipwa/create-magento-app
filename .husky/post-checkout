OLD_REF="$1"
NEW_REF="$2"
IS_BRANCH_CHECKOUT="$3"

# Only act on branch checkouts (not path checkouts)
if [ "$IS_BRANCH_CHECKOUT" != "1" ]; then
  exit 0
fi

# If git is not available, do nothing
if ! command -v git >/dev/null 2>&1; then
  exit 0
fi

# If old ref is empty (unborn) or same as new, skip
if [ -z "$OLD_REF" ] || [ "$OLD_REF" = "$NEW_REF" ] || echo "$OLD_REF" | grep -q '^0\{40\}$'; then
  exit 0
fi

# Determine if any composer files changed anywhere in the repo between refs
ALL_CHANGED=$(git diff --name-only "$OLD_REF" "$NEW_REF" 2>/dev/null || true)
CHANGED_FILES=$(printf "%s\n" "$ALL_CHANGED" | grep -E '(^|/)(composer\.json|composer\.lock)$' || true)

if [ -z "$CHANGED_FILES" ]; then
  exit 0
fi

MESSAGE_TITLE="Composer dependencies changed"
MESSAGE_BODY="Detected changes in:\n$CHANGED_FILES\n\nPlease run: composer install"

# Cross-platform desktop notification with multiple fallbacks
send_notification() {
  local title="$1"
  local body="$2"
  
  # Try Linux notify-send first
  if command -v notify-send >/dev/null 2>&1; then
    notify-send -u normal -t 8000 "$title" "$body"
    return 0
  fi
  
  # Try macOS terminal-notifier
  if command -v terminal-notifier >/dev/null 2>&1; then
    terminal-notifier -title "$title" -message "$body" -timeout 8
    return 0
  fi
  
  # Try macOS osascript (AppleScript) as fallback
  if command -v osascript >/dev/null 2>&1; then
    osascript -e "display notification \"$body\" with title \"$title\""
    return 0
  fi
  
  # Final fallback to stdout
  echo "$title"
  echo "$body"
}

send_notification "$MESSAGE_TITLE" "$MESSAGE_BODY"
